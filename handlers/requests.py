from aiogram import Bot, Router, types
from aiogram.types import ChatJoinRequest
from datetime import datetime, timedelta
from sqlalchemy import delete
from sqlalchemy.future import select
from aiogram.exceptions import TelegramBadRequest

# from database.db import async_session
from database.models import GroupSettings, PendingRequest
from utils.service import scheduler
from keyboards.inline import verify_kb

requests_router = Router()


# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∑–∞—è–≤–æ–∫
# pending_users = {}

@requests_router.chat_join_request()
async def handle_chat_join_request(event: ChatJoinRequest, bot: Bot):
    async_session = bot.workflow_data['async_session']
    chat_id = event.chat.id
    user_id = event.from_user.id

    async with async_session() as session:
        result = await session.execute(select(GroupSettings)
            .where(GroupSettings.group_id == chat_id)
            )
        group = result.scalar()

        if not group or not group.approve_requests or group.captcha_timeout <= 0:
            # print(f"‚ö†Ô∏è –ó–∞—è–≤–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id} –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∏–ª–∏ –∫–∞–ø—á–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            return

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞—è–≤–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        await session.execute(
                delete(PendingRequest)
                .where(PendingRequest.user_id == user_id)
                .where(PendingRequest.chat_id == chat_id)
            )

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            msg = await bot.send_message(
                user_id,
                f"–ü—Ä–∏–≤–µ—Ç, <b>{event.from_user.first_name}</b>!\n"
                f"–î–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —á–∞—Ç <b>{event.chat.title}</b>, "
                f"–ø–æ–¥—Ç–≤–µ—Ä–¥–∏ –≤—Ö–æ–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ <b>{group.captcha_timeout} –º–∏–Ω—É—Ç</b> ‚§µÔ∏è",
                reply_markup=verify_kb,
                parse_mode="HTML"
            )

            # –î–æ–±–∞–≤–ª—è–º –Ω–æ—É—é –∑–∞—è–≤–∫—É
            new_request = PendingRequest(
                user_id=user_id, chat_id=chat_id, message_id=msg.message_id
            )
            session.add(new_request)
            await session.commit()


            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 30 –º–∏–Ω—É—Ç
            run_time = datetime.now() + timedelta(minutes=group.captcha_timeout)
            job_id = f"reject_{user_id}_{chat_id}"

            existing_job = scheduler.get_job(job_id)
            if existing_job:
                print(f"–ó–∞–¥–∞—á–∞ {job_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é.")
            else:
            # if not scheduler.get_job(job_id):
                print(f"[LOG] –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ {job_id} –Ω–∞ {run_time}")
                scheduler.add_job(
                    reject_request,
                    # lambda: reject_request(bot, chat_id, user_id, msg.message_id),
                    "date",
                    run_date=run_time,
                    args=[bot, chat_id, user_id, msg.message_id],
                    id=job_id,
                    misfire_grace_time=10,
                    max_instances=1
                )

        except TelegramBadRequest:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–µ—Ç–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} ‚ö†Ô∏è")
            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å—Ä–∞–∑—É –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É
            await bot.decline_chat_join_request(chat_id, user_id)

# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–µ–±—è
async def reject_request(bot: Bot, group_id: int, user_id: int, message_id: int):
    # print(f"–ó–∞–ø—É—Å–∫ reject_request –¥–ª—è user_id={user_id}, group_id={group_id}")
    async_session = bot.workflow_data['async_session']

    async with async_session() as session:
        result = await session.execute(
            select(PendingRequest)
            .where(PendingRequest.user_id == user_id)
            .where(PendingRequest.chat_id == group_id)
        )
        request = result.scalar()

        if not request:
            # print(f"‚ö†Ô∏è –ó–∞—è–≤–∫–∞ {user_id} –≤ {group_id} —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.")
            return

        try:
            # –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞—è–≤–∫—É
            # print("–ü—ã—Ç–∞—é—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ decline_chat_join_request")
            await bot.decline_chat_join_request(group_id, user_id)
            # print("–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ.")

            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            # print("–£–¥–∞–ª—è—é –∑–∞–ø–∏—Å—å –∑–∞—è–≤–∫–∏ –∏–∑ –ë–î")
            await session.execute(
                    delete(PendingRequest)
                    .where(PendingRequest.user_id == user_id)
                    .where(PendingRequest.chat_id == group_id)
                )
            await session.commit()
            # print(f"[LOG]–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ {user_id} –≤ {group_id}")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # print("–ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ç–æ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
            await bot.edit_message_text(
                chat_id=user_id,
                message_id=message_id,
                text="<b>–í—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≤—Ö–æ–¥, –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ üõë</b>",
                parse_mode="HTML"
            )
            # print("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

        except Exception as e:
            # –ù–µ –ø–æ–¥–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É, –∞ –ª–æ–≥–∏—Ä—É–µ–º –µ—ë
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ reject_request –¥–ª—è user_id={user_id}, group_id={group_id}: {e}")



# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–µ–±—è
@requests_router.callback_query(lambda c: c.data == "not_a_bot")
async def verify_user(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    message_id = callback.message.message_id
    async_session = bot.workflow_data['async_session']

    async with async_session() as session:
        result = await session.execute(
            select(PendingRequest).where(
                PendingRequest.user_id == user_id,
                PendingRequest.message_id == message_id
            )
        )
        request = result.scalar()

        if not request:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ!")
            return

        group_id = request.chat_id
        job_id = f"reject_{user_id}_{group_id}"

        try:
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞—è–≤–∫—É
            await bot.approve_chat_join_request(group_id, user_id)
            await callback.message.edit_text(
                "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≤—Ö–æ–¥, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç ‚úÖ")

            if scheduler.get_job(job_id):
                scheduler.remove_job(job_id)

            # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –∏–∑ –ë–î
            await session.execute(
                delete(PendingRequest)
                .where(PendingRequest.user_id == user_id)
                .where(PendingRequest.chat_id == group_id)
            )
            await session.commit()

        except TelegramBadRequest as e:
            print(f"–û—à–∏–±–∫–∞: {e}")

    await callback.answer()